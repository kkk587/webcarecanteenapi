FORMAT: 1A

# Webcare Canteen API

API documentation for upcoming Webcare Canteen API.

Every request must include header Accept-Language to get response in correct language, if missing or not recognized default language is used.

` `

Authorization token is obtained through HTTP Basic Auth or by login request for card authorization. Identification of customer (or admin) is decoded from token.

    
` `


Successful response is code 200. Errors are returned as standard HTTP errors with corresponding error code (4xx - client error, 5xx - server error) and description 

When force error occurs server returns status code 449 and object with following schema
https://drive.google.com/file/d/0B1_u4k6eQMDqc3NnZy1Zcm53azQ/view?usp=sharing
Client displays alert constructed from force object and responses with force_answer or force_cancel. Only POST methods implements force error.

` `


` `

Definition of additional data objects with example: https://docs.google.com/document/d/14NSKxR2U8BEieUCxF4dxUFpR49ISOTBhmiXAw_OpBWQ/edit?usp=sharing

` `

Links returned by API can be formatted in two ways. Standard links with http:// or https:// and link to resource on page `image://product.jpg` means that path to resource is `https://server.url/image/product.jpg`

` `


All parameters and request attributes are optional by default.

` `

#Enumarated types
## CancelStatus (enum[string])
- NOT_POSSIBLE - Cannot be canceled
- FOR_EXCHANGE - Can be offered for exchange
- POSSIBLE - Can be canceled

## OrderStatus (enum[string])
- ACTIVE - Current orders
- CLOSED - Past orders
- FOR_EXCHANGE - Order offered for exchange
- CANCELED - Canceled orders

## MenuStatus (enum[string])
- CLOSED - Orders closed
- SOLD_OUT - Sold out
- SINGLE_ITEM - Available to order single item
- MULTIPLE - Available to order multiple items

## MenuTimeSpan (enum[string])
- DAY - 1 day time span
- WEEK - 7 day time span
- TIMESPAN - Configured time span of menu

## HealthIndex (enum[string])
- UNHEALTHY - Unhealthy - red
- NORMAL - Normal - orange
- HEALTHY - Healthy - green

## Menu [/menu]

### Get menu (NEW) [GET /menu?date={date}&timespan={timespan}&firstDay={firstDay}&canteenId={canteenId}]
?? V parametrech není zdokumentovaný firstDate. A upřímně teď už ani netuším rozdíl mezi date a FirstDate. Pokud na to také nepřijdete v rámci toho, jak se to bude realizovat, tak bych nechal jenom firstDate.
Get menu for customer. If no attributes are provided menu is based on customer default preferences set in Septim.

+ Parameters 
    - date:  `dd-MM-yyyy` (string, optional) - Date of order
    - timespan: DAY (MenuTimeSpan, optional) - selected time span of order
    - canteenId: 12 (number, optional) - id of selected canteen

+ Request (application/json)
    + Headers
    
            Authorization: abc  (required) - customer authorization
        

+ Response 200 (application/json)
    + Attributes (MenuResponse)
?? Mám za to, že jsme se bavili, že položka menu (nabídky) nemá IDčko, objednáváme recepturu.     


    
## Canteens [/canteen]

### Get canteens (NEW) [GET /canteen]

Get list of canteens for customer.

+ Request (application/json)
    + Headers
    
            Authorization: abc  (customer credentials)
            
+ Response 200 (application/json)
    + Attributes (array[Canteen])


## Orders  [/order]


### Create direct order (NEW) [POST /order/direct]

Create direct order.
Returns order confirmation.

+ Request (application/json)
    + Headers
?? Měli by jsme objednávat produkt ne menu, to v podstatě neexistuje jako záznam
    
            Authorization: abc  (customer credentials)
    + Attributes (OrderDirectRequest)

        

+ Response 200 (application/json)
    + Attributes
        + success: true (boolean)
        

        
### Create order from cart (NEW) [POST /order/cart]

Create order from cart.
Returns order confirmation.

+ Request (application/json)
    + Headers
?? Stejný problém s identifikací co objednáváme    
            Authorization: abc  (customer credentials)
            
    + Attributes (OrderCartRequest)

        

+ Response 200 (application/json)
    + Attributes
        + success: true (boolean)
        
        

### Check  order from cart (NEW) [POST /order/cart/check]

Check if order can be placed.

+ Request (application/json)
    + Headers
?? Stejný problém s identifikací co objednáváme

            Authorization: abc  (customer credentials)
            
    + Attributes (OrderCartRequest)

        
+ Response 200 (application/json)
    + Attributes
        + success: true (boolean)




## Customer profile & management [/customer]

### Login with card (NEW) [POST /customer/cardlogin]

Returns customer's Basic Auth token. Identified by card reader.

+ Request (application/json)
    + Attributes
        + cardId: abc (string, optional) - Identification of card read by card reader.
        
+ Response 200 (application/json)
    + Attributes
        + token: abc (string, optional) - Authorization token for provided cardId
 


### Top up customer account (NEW) [POST /customer/account/topup]
?? Je to v souladu s aktuálním stavem práce s branami? Nevím o ničem, jenom vím, že jsme dělali nějaké změny. 

Request customer account top up. Webcare api creates unique transaction id for payment gateway.

+ Request (application/json)
    + Headers
    
            Authorization: abc (required)
    + Attributes
         + amount: 12 (number, required) - Amount to top up.

+ Response 200 (application/json)
    + Attributes 
        + transactionId: 2332 (number, required) - Unique transaction id for payment gateway.


### Get canteen orders (NEW) [GET /customer/canteenorders]
?? Komentář je asi dost blbě

Request customer account top up. Webcare api creates unique transaction id for payment gateway.

+ Request (application/json)
    + Headers
    
            Authorization: abc (required)

+ Response 200 (application/json)
    + Attributes (array[CanteenOrder])
?? Struktura odpovědi je divná. Nemělo by tam být menuItem (to co z něj potřebujeme už máme správně v CanteenOrder)
?? Místo menuItem potřebujeme product. Párování mezi nabídkou a objednávkami musíte dělat přes datum a productId.
?? Nebojte se do tohoto komentáře dát informaci o způsobu párování za mně to sem patří. 
                


### Top up payment result (NEW) [POST /customer/topup/result]

Request between private Web API and Septim API. Confirms successful payment of transaction or cancels transaction in case of error in payment.
Request is authorized with admin credentials.

?? Nerozumím tomu, proč máme dvě API metody. Až to bude k tomu (tedy víte že je zaplaceno), tak nabijeme konto.
?? Teoreticky dokážu pochopit, že by jsme Vám uchovávali identifikátor transakce mezi požadavkem na platbu a potvrzením platby. Ale pak to tady musí být popsané.
    
+ Request (application/json)
    + Headers
    
            Authorization: abc (admin credentials)
        
    + Attributes (PaymentResult)

+ Response 200 (application/json)
    + Attributes
        + success: true (boolean) - Confirmation of successful request
        
## Web API requests [/api]


### Get payment link for (NEW) [POST /api/topup/link]

Not part of Septim API
    
Request between client and web api.

After payment validation, browser is redirected to specified return URL with GET parameters withpayment result. (?paymentSuccess=true)

?? tomuhle moc nerozumím a věta "Request between client and web api." tomu nepomáhá. 

+ Request (application/json)
    + Headers
    
            Authorization: abc (customer credentials,optional)

    + Attributes (GatewayRequest)
+ Response 200
    + Attributes (GatewayResponse)
        

        

      

# Data Structure



## CancelStatus (enum[string])
- NOT_POSSIBLE - Cannot be canceled
- FOR_EXCHANGE - Can be offered for exchange
- POSSIBLE - Can be canceled

## OrderStatus (enum[string])
- ACTIVE - Current orders
- CLOSED - Past orders
- FOR_EXCHANGE - Order offered for exchange
- CANCELED - Canceled orders

## MenuStatus (enum[string])
- CLOSED - Orders closed
- SOLD_OUT - Sold out
- SINGLE_ITEM - Available to order single item
- MULTIPLE - Available to order multiple items

## MenuTimeSpan (enum[string])
- DAY - 1 day time span
- WEEK - 7 day time span
- TIMESPAN - Configured time span of menu

## HealthIndex (enum[string])
- UNHEALTHY - Unhealthy - red
- NORMAL - Normal - orange
- HEALTHY - Healthy - green

## AdditionDataComponent (enum[string])
- const-image
- const-text
- var-image
- var-text
- input-text

## Product

- id: 123 (number, required) - Product unique identificator
- name: Soup (string, required) - Product display name
- image: image://123.jpg (string, required) - Url to product image. See Introduction -  Links
- description: Product Description (string, required) - Product description text
- size: 200 ml (string, required) - Size of product (weight, volume...)
- healthIndex: HEALTHY (HealthIndex, sample, nullable, optional)
- additionalData (array[AdditionalData], optional, fixed-type) - Other product informations
- allergens (array[ProductAllergen], required, fixed-type) - List of allergens in product

## ProductAllergen

- shortName: 01 (string, required) - Short name of allergen
- longName: Shrimp (string, required) - Long name of allergen


## OrderItem
- menuItemId: 123 (number, required) - Id of meal to order
- quantity: 2 (number, required) - Quantity of ordered product. If not provided quantity is 1.


## Canteen 
- id: 77 (number, required) - Unique identificator of outlet
- name: Outlet 1 (string, required) - Display name of outlet

## MenuRequest 
- date:  `dd-MM-yyyy` (string, optional) - Date of order
- timespan: week (MenuTimeSpan, optional) - selected time span of order
- canteenId: 12 (number, optional) - id of selected canteen

## MenuResponse
- timespan: week (MenuTimeSpan, required, sample) - Displayed timespan of menu
- canteenId: 123 (number, required) - Canteen id of menu
- filters (array[MenuFilter], required, fixed-type) - Available filters for menu
- menu (array[Menu], required, fixed-type) - Menu by days

## Menu (array[MenuItem], required, fixed-type)

## MenuItem
- id: 23 (number, required) - Id of menu item
- date:  `dd-MM-yyyy` (string, required) - Date of menu item
- price: 23 (number, required) - Price of item
- name: Menu 1 (string, required) - Name of menu item
- status: SINGLE_ITEM (MenuStatus, sample, required)
- filter: vege (string, required) - Filter value of menu item
- group: launch (string, required) - Group of meal for menu item
- product (Product, nullable, optional) - Product recipe

## MenuFilter
- value: launch (string, required) - Value for filter
- label: Obed (string, required) - Label of filter

## OrderDirectRequest
- price: 300 (number, required) - Calculated price of order, price is verified with DB and if doesn't match error is thrown.
- orderDate: `dd-MM-yyyy` (string, required) - Date order will be created for
- canteenId: 12 (number, required) - Canteen for order
- item (OrderItem, required) - Item to order
- additionalData (array[AdditionalDataRequest], optional) - Other order data

## OrderCartRequest
- price: 300 (number, required) - Calculated price of order, price is verified with DB and if doesn't match error is thrown.
- orderDate: `dd-MM-yyyy` (string, required) - Date order will be created for
- canteenId: 12 (number, required) - Canteen for order.
- items (array[OrderItem], required, fixed-type) - Items to order
- additionalData (array[AdditionalDataRequest], optional) - Other order data


## Order
- id: abc (string, required) - Unique identification of order
- date:  `dd-MM-yyyy` (string, required) - Date of order
- filter: launch (string, required) - Group of order
- canteenId: 77 (number, required)
- status: ACTIVE (OrderStatus, sample, required) - Current status code of order
- price: 232 (number, required) - Total price of order
- items (array[OrderItem], required, fixed-type) - List of ordered products
- additionalData (array[AdditionalData],optional, fixed-type) - Other order informations

## CanteenOrder
- id: abc (string, required) - Unique identification of order
- date:  `dd-MM-yyyy` (string, required) - Date of order
- canteenId: 77 (number, required) - Identification of canteen
- quantity: 2 (number, required) - Quantity of ordered product. If not provided quantity is 1.
- orderPrice: 232 (number, required) - The order price.
- cancelStatus: POSSIBLE (CancelStatus, sample, required) - Cancel options
- menuItem (MenuItem, required) - Ordered menu item


## OrderConfirmation
- id: abc (string, required) - Unique identification of order
- status: ACTIVE (OrderStatus, required) - Current status code of order
- orderPrice: 232 (number, required) - The order price.


## AdditionalDataBase
- variableId: customerCountry (string, required) - Id of data object in administration
- value: Czech Republic (string, required) - Value of data object

## AdditionalData (AdditionalDataBase, fixed-type)

## AdditionalDataRequest (AdditionalDataBase)
- type: input-text (AdditionDataComponent,required, sample) - Type of data object
- label: Label (string, optional) - input label which describes the field. for type input-text
- target (string, optional) - target of data object


##GatewayRequest
- toBePaid: 111 (number, required) - The amount, which should be paid.
- returnUrl: http://return.url/ (string, required) -  Defines return adress, after payement completion

##GatewayResponse
- gatewayLink: http://link.to.gateway/payment (string, required) - Link to payment gateway


## PaymentResult
- transactionId: abc (string, required) - Id of transaction
- paymentSuccessful: true (boolean, required) - Result of payment

## PaymentResultResponse
- paid: 23 (number, required) - amount paid by customer
